import { Component, OnInit, ChangeDetectorRef, NgZone } from '@angular/core';
import { Router, ActivatedRoute, NavigationEnd } from '@angular/router';
import { SnippetService } from '../services/snippet.service';
import { SnippetModelService } from '../services/snippet-model.service';
import 'rxjs/add/operator/pairwise';
import { Subscription } from "rxjs/Subscription";

@Component({
  selector: 'app-code-pages',
  templateUrl: './code-pages.component.html',
  styleUrls: ['./code-pages.component.scss']
})
export class CodePagesComponent implements OnInit {
  aloneSnippet: Object;
  codeSnippet: string = '';
  snippetModel: SnippetModelService;
  snippetId: string;
  param: string = '';
  // id: number;
  // private sub: any;
  rerender: boolean;
  previousUrl: string = null;
  previousUrlAfterRedirects: string = null;
  currentUrl: string = null;
  currentUrlAfterRedirects: string = null;
  messageFirstParam: string;
  private subscription1: Subscription;
  private subscription2: Subscription;
  private subscription3: Subscription;
  private subscription4: Subscription;

  constructor(private snippetService: SnippetService, private route: ActivatedRoute,
      private router: Router, private cdRef: ChangeDetectorRef, private zone: NgZone) {
    // this.snippetId = route.snapshot.params['id'];

    // this.router.events.pairwise().subscribe((event) => {
    //   console.log('************************* router events: ***********************');
    //   console.log(event);
  // });

  this.subscription1 = this.snippetService.currentMessage.subscribe(message => {
      this.messageFirstParam = message;        
    });
    



    this.subscription2 = this.route.params.subscribe(params => {

      this.subscription3 = router.events
      .filter(event => event instanceof NavigationEnd)
      .subscribe((e: any) => {
        this.previousUrl = this.currentUrl;
        this.previousUrlAfterRedirects = this.currentUrlAfterRedirects;
        this.currentUrl = e.url;
        this.currentUrlAfterRedirects = e.urlAfterRedirects;
        console.log('************************* router events: ***********************');
        console.log(e);
        console.log(e.urlAfterRedirects);


          



          console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
          console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
          console.log('++++++++++++++++++ this.currentUrl +++++++++++++++++++++++++++');
          console.log(this.currentUrl);
          console.log('+++++++++++ this.messageFirstParam +++++++++++++++++++++++++++');
          console.log(this.messageFirstParam);
          console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
    
          // if (!params['id']) this.param = '1.1.0.1';
          //  else this.param = params['id'];
          if (this.currentUrl === '/code') {
            console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
            console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
            console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
            console.log('this.currentUrl === "/code"');
            console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
            console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');  
            if (this.param === '') {
              this.param = this.messageFirstParam;
              console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
              console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
              console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
              console.log('this.param == null');
              console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
              console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
            }
          } else {
            this.param = params['id'];
          }
          console.log('*************************** this.param = ', this.param);
          this.snippetId = this.param;
          // Retrive alone snippet by ID from API
          this.subscription4 = this.snippetService.getByIdSnippet(this.snippetId).subscribe(snippet => {
            this.aloneSnippet = snippet;
            this.codeSnippet = snippet.codeSnippet;
            console.log("snippet: ");
            console.log(snippet);
            console.log("this.aloneSnippet: ");
            console.log(this.aloneSnippet);
            console.log("this.aloneSnippet.title: ");
            console.log(snippet.codeSnippet);
    /*
            this.snippetModel = new SnippetModelService(snippet.id, snippet.thema, snippet.title,
              snippet.method, snippet.language, snippet.lib, snippet.codeSnippet, snippet.link);
    */
              this.snippetModel = new SnippetModelService().deserialize(snippet);
              this.doRerender();
          });
          















      });

      





    });

  

  }

  doRerender() {
    this.rerender = true;
    this.cdRef.detectChanges();
    this.rerender = false;
  }

  ngOnInit() {


    
    
/*
    this.sub = this.route.params.subscribe(params => {
      this.id = +params['id']; // (+) converts string 'id' to a number
      this.router.navigate(['code', this.id]);
    });
*/

/*
this.route.params.subscribe(params => {
  this.param = params['id'];
  console.log('this.param = ', this.param);
  this.snippetId = this.param;
  this.doRerender();
  this.zone.run(() => {
    console.log('enabled time travel');
  });
  // this.doRerender();
  // this.router.navigate(['home']);
  this.router.navigateByUrl('/code/' + this.param);
  this.router.navigate(['code', this.param])
    .then(() => {
    // window.location.reload()
    console.log("!!!");
    this.doRerender();
    });
  // this.router.navigateByUrl('/code/' + this.param);
  // this.router.navigate(['']);

  // this.route.snapshot.data['id'];

});
*/

  }

  ngOnDestroy() {
    this.subscription1.unsubscribe();
    this.subscription1.unsubscribe();
    this.subscription1.unsubscribe();
    this.subscription1.unsubscribe();
  }

}
